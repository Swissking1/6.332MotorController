
bin/6.332MotorController.elf:     file format elf32-littlearm


Disassembly of section .text:

080001d8 <deregister_tm_clones>:
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <deregister_tm_clones+0x14>)
 80001da:	4805      	ldr	r0, [pc, #20]	; (80001f0 <deregister_tm_clones+0x18>)
 80001dc:	1a1b      	subs	r3, r3, r0
 80001de:	2b06      	cmp	r3, #6
 80001e0:	d902      	bls.n	80001e8 <deregister_tm_clones+0x10>
 80001e2:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <deregister_tm_clones+0x1c>)
 80001e4:	b103      	cbz	r3, 80001e8 <deregister_tm_clones+0x10>
 80001e6:	4718      	bx	r3
 80001e8:	4770      	bx	lr
 80001ea:	bf00      	nop
 80001ec:	2000043f 	.word	0x2000043f
 80001f0:	2000043c 	.word	0x2000043c
 80001f4:	00000000 	.word	0x00000000

080001f8 <register_tm_clones>:
 80001f8:	4905      	ldr	r1, [pc, #20]	; (8000210 <register_tm_clones+0x18>)
 80001fa:	4806      	ldr	r0, [pc, #24]	; (8000214 <register_tm_clones+0x1c>)
 80001fc:	1a09      	subs	r1, r1, r0
 80001fe:	1089      	asrs	r1, r1, #2
 8000200:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8000204:	1049      	asrs	r1, r1, #1
 8000206:	d002      	beq.n	800020e <register_tm_clones+0x16>
 8000208:	4b03      	ldr	r3, [pc, #12]	; (8000218 <register_tm_clones+0x20>)
 800020a:	b103      	cbz	r3, 800020e <register_tm_clones+0x16>
 800020c:	4718      	bx	r3
 800020e:	4770      	bx	lr
 8000210:	2000043c 	.word	0x2000043c
 8000214:	2000043c 	.word	0x2000043c
 8000218:	00000000 	.word	0x00000000

0800021c <__do_global_dtors_aux>:
 800021c:	b510      	push	{r4, lr}
 800021e:	4c06      	ldr	r4, [pc, #24]	; (8000238 <__do_global_dtors_aux+0x1c>)
 8000220:	7823      	ldrb	r3, [r4, #0]
 8000222:	b943      	cbnz	r3, 8000236 <__do_global_dtors_aux+0x1a>
 8000224:	f7ff ffd8 	bl	80001d8 <deregister_tm_clones>
 8000228:	4b04      	ldr	r3, [pc, #16]	; (800023c <__do_global_dtors_aux+0x20>)
 800022a:	b113      	cbz	r3, 8000232 <__do_global_dtors_aux+0x16>
 800022c:	4804      	ldr	r0, [pc, #16]	; (8000240 <__do_global_dtors_aux+0x24>)
 800022e:	f3af 8000 	nop.w
 8000232:	2301      	movs	r3, #1
 8000234:	7023      	strb	r3, [r4, #0]
 8000236:	bd10      	pop	{r4, pc}
 8000238:	2000043c 	.word	0x2000043c
 800023c:	00000000 	.word	0x00000000
 8000240:	0800141c 	.word	0x0800141c

08000244 <frame_dummy>:
 8000244:	b508      	push	{r3, lr}
 8000246:	4b08      	ldr	r3, [pc, #32]	; (8000268 <frame_dummy+0x24>)
 8000248:	b11b      	cbz	r3, 8000252 <frame_dummy+0xe>
 800024a:	4908      	ldr	r1, [pc, #32]	; (800026c <frame_dummy+0x28>)
 800024c:	4808      	ldr	r0, [pc, #32]	; (8000270 <frame_dummy+0x2c>)
 800024e:	f3af 8000 	nop.w
 8000252:	4808      	ldr	r0, [pc, #32]	; (8000274 <frame_dummy+0x30>)
 8000254:	6803      	ldr	r3, [r0, #0]
 8000256:	b913      	cbnz	r3, 800025e <frame_dummy+0x1a>
 8000258:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800025c:	e7cc      	b.n	80001f8 <register_tm_clones>
 800025e:	4b06      	ldr	r3, [pc, #24]	; (8000278 <frame_dummy+0x34>)
 8000260:	2b00      	cmp	r3, #0
 8000262:	d0f9      	beq.n	8000258 <frame_dummy+0x14>
 8000264:	4798      	blx	r3
 8000266:	e7f7      	b.n	8000258 <frame_dummy+0x14>
 8000268:	00000000 	.word	0x00000000
 800026c:	20000440 	.word	0x20000440
 8000270:	0800141c 	.word	0x0800141c
 8000274:	2000043c 	.word	0x2000043c
 8000278:	00000000 	.word	0x00000000

0800027c <__aeabi_uldivmod>:
 800027c:	b953      	cbnz	r3, 8000294 <__aeabi_uldivmod+0x18>
 800027e:	b94a      	cbnz	r2, 8000294 <__aeabi_uldivmod+0x18>
 8000280:	2900      	cmp	r1, #0
 8000282:	bf08      	it	eq
 8000284:	2800      	cmpeq	r0, #0
 8000286:	bf1c      	itt	ne
 8000288:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800028c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000290:	f000 b97a 	b.w	8000588 <__aeabi_idiv0>
 8000294:	f1ad 0c08 	sub.w	ip, sp, #8
 8000298:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800029c:	f000 f806 	bl	80002ac <__udivmoddi4>
 80002a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a8:	b004      	add	sp, #16
 80002aa:	4770      	bx	lr

080002ac <__udivmoddi4>:
 80002ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b0:	468c      	mov	ip, r1
 80002b2:	460d      	mov	r5, r1
 80002b4:	4604      	mov	r4, r0
 80002b6:	9e08      	ldr	r6, [sp, #32]
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d151      	bne.n	8000360 <__udivmoddi4+0xb4>
 80002bc:	428a      	cmp	r2, r1
 80002be:	4617      	mov	r7, r2
 80002c0:	d96d      	bls.n	800039e <__udivmoddi4+0xf2>
 80002c2:	fab2 fe82 	clz	lr, r2
 80002c6:	f1be 0f00 	cmp.w	lr, #0
 80002ca:	d00b      	beq.n	80002e4 <__udivmoddi4+0x38>
 80002cc:	f1ce 0c20 	rsb	ip, lr, #32
 80002d0:	fa01 f50e 	lsl.w	r5, r1, lr
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	fa02 f70e 	lsl.w	r7, r2, lr
 80002dc:	ea4c 0c05 	orr.w	ip, ip, r5
 80002e0:	fa00 f40e 	lsl.w	r4, r0, lr
 80002e4:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002e8:	0c25      	lsrs	r5, r4, #16
 80002ea:	fbbc f8fa 	udiv	r8, ip, sl
 80002ee:	fa1f f987 	uxth.w	r9, r7
 80002f2:	fb0a cc18 	mls	ip, sl, r8, ip
 80002f6:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002fa:	fb08 f309 	mul.w	r3, r8, r9
 80002fe:	42ab      	cmp	r3, r5
 8000300:	d90a      	bls.n	8000318 <__udivmoddi4+0x6c>
 8000302:	19ed      	adds	r5, r5, r7
 8000304:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000308:	f080 8123 	bcs.w	8000552 <__udivmoddi4+0x2a6>
 800030c:	42ab      	cmp	r3, r5
 800030e:	f240 8120 	bls.w	8000552 <__udivmoddi4+0x2a6>
 8000312:	f1a8 0802 	sub.w	r8, r8, #2
 8000316:	443d      	add	r5, r7
 8000318:	1aed      	subs	r5, r5, r3
 800031a:	b2a4      	uxth	r4, r4
 800031c:	fbb5 f0fa 	udiv	r0, r5, sl
 8000320:	fb0a 5510 	mls	r5, sl, r0, r5
 8000324:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000328:	fb00 f909 	mul.w	r9, r0, r9
 800032c:	45a1      	cmp	r9, r4
 800032e:	d909      	bls.n	8000344 <__udivmoddi4+0x98>
 8000330:	19e4      	adds	r4, r4, r7
 8000332:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000336:	f080 810a 	bcs.w	800054e <__udivmoddi4+0x2a2>
 800033a:	45a1      	cmp	r9, r4
 800033c:	f240 8107 	bls.w	800054e <__udivmoddi4+0x2a2>
 8000340:	3802      	subs	r0, #2
 8000342:	443c      	add	r4, r7
 8000344:	eba4 0409 	sub.w	r4, r4, r9
 8000348:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800034c:	2100      	movs	r1, #0
 800034e:	2e00      	cmp	r6, #0
 8000350:	d061      	beq.n	8000416 <__udivmoddi4+0x16a>
 8000352:	fa24 f40e 	lsr.w	r4, r4, lr
 8000356:	2300      	movs	r3, #0
 8000358:	6034      	str	r4, [r6, #0]
 800035a:	6073      	str	r3, [r6, #4]
 800035c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000360:	428b      	cmp	r3, r1
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0xc8>
 8000364:	2e00      	cmp	r6, #0
 8000366:	d054      	beq.n	8000412 <__udivmoddi4+0x166>
 8000368:	2100      	movs	r1, #0
 800036a:	e886 0021 	stmia.w	r6, {r0, r5}
 800036e:	4608      	mov	r0, r1
 8000370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000374:	fab3 f183 	clz	r1, r3
 8000378:	2900      	cmp	r1, #0
 800037a:	f040 808e 	bne.w	800049a <__udivmoddi4+0x1ee>
 800037e:	42ab      	cmp	r3, r5
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xdc>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 80fa 	bhi.w	800057c <__udivmoddi4+0x2d0>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb65 0503 	sbc.w	r5, r5, r3
 800038e:	2001      	movs	r0, #1
 8000390:	46ac      	mov	ip, r5
 8000392:	2e00      	cmp	r6, #0
 8000394:	d03f      	beq.n	8000416 <__udivmoddi4+0x16a>
 8000396:	e886 1010 	stmia.w	r6, {r4, ip}
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	b912      	cbnz	r2, 80003a6 <__udivmoddi4+0xfa>
 80003a0:	2701      	movs	r7, #1
 80003a2:	fbb7 f7f2 	udiv	r7, r7, r2
 80003a6:	fab7 fe87 	clz	lr, r7
 80003aa:	f1be 0f00 	cmp.w	lr, #0
 80003ae:	d134      	bne.n	800041a <__udivmoddi4+0x16e>
 80003b0:	1beb      	subs	r3, r5, r7
 80003b2:	0c3a      	lsrs	r2, r7, #16
 80003b4:	fa1f fc87 	uxth.w	ip, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb3 f8f2 	udiv	r8, r3, r2
 80003be:	0c25      	lsrs	r5, r4, #16
 80003c0:	fb02 3318 	mls	r3, r2, r8, r3
 80003c4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c8:	fb0c f308 	mul.w	r3, ip, r8
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x134>
 80003d0:	19ed      	adds	r5, r5, r7
 80003d2:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 80003d6:	d202      	bcs.n	80003de <__udivmoddi4+0x132>
 80003d8:	42ab      	cmp	r3, r5
 80003da:	f200 80d1 	bhi.w	8000580 <__udivmoddi4+0x2d4>
 80003de:	4680      	mov	r8, r0
 80003e0:	1aed      	subs	r5, r5, r3
 80003e2:	b2a3      	uxth	r3, r4
 80003e4:	fbb5 f0f2 	udiv	r0, r5, r2
 80003e8:	fb02 5510 	mls	r5, r2, r0, r5
 80003ec:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003f0:	fb0c fc00 	mul.w	ip, ip, r0
 80003f4:	45a4      	cmp	ip, r4
 80003f6:	d907      	bls.n	8000408 <__udivmoddi4+0x15c>
 80003f8:	19e4      	adds	r4, r4, r7
 80003fa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x15a>
 8000400:	45a4      	cmp	ip, r4
 8000402:	f200 80b8 	bhi.w	8000576 <__udivmoddi4+0x2ca>
 8000406:	4618      	mov	r0, r3
 8000408:	eba4 040c 	sub.w	r4, r4, ip
 800040c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000410:	e79d      	b.n	800034e <__udivmoddi4+0xa2>
 8000412:	4631      	mov	r1, r6
 8000414:	4630      	mov	r0, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1ce 0420 	rsb	r4, lr, #32
 800041e:	fa05 f30e 	lsl.w	r3, r5, lr
 8000422:	fa07 f70e 	lsl.w	r7, r7, lr
 8000426:	fa20 f804 	lsr.w	r8, r0, r4
 800042a:	0c3a      	lsrs	r2, r7, #16
 800042c:	fa25 f404 	lsr.w	r4, r5, r4
 8000430:	ea48 0803 	orr.w	r8, r8, r3
 8000434:	fbb4 f1f2 	udiv	r1, r4, r2
 8000438:	ea4f 4518 	mov.w	r5, r8, lsr #16
 800043c:	fb02 4411 	mls	r4, r2, r1, r4
 8000440:	fa1f fc87 	uxth.w	ip, r7
 8000444:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000448:	fb01 f30c 	mul.w	r3, r1, ip
 800044c:	42ab      	cmp	r3, r5
 800044e:	fa00 f40e 	lsl.w	r4, r0, lr
 8000452:	d909      	bls.n	8000468 <__udivmoddi4+0x1bc>
 8000454:	19ed      	adds	r5, r5, r7
 8000456:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 800045a:	f080 808a 	bcs.w	8000572 <__udivmoddi4+0x2c6>
 800045e:	42ab      	cmp	r3, r5
 8000460:	f240 8087 	bls.w	8000572 <__udivmoddi4+0x2c6>
 8000464:	3902      	subs	r1, #2
 8000466:	443d      	add	r5, r7
 8000468:	1aeb      	subs	r3, r5, r3
 800046a:	fa1f f588 	uxth.w	r5, r8
 800046e:	fbb3 f0f2 	udiv	r0, r3, r2
 8000472:	fb02 3310 	mls	r3, r2, r0, r3
 8000476:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800047a:	fb00 f30c 	mul.w	r3, r0, ip
 800047e:	42ab      	cmp	r3, r5
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1e6>
 8000482:	19ed      	adds	r5, r5, r7
 8000484:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000488:	d26f      	bcs.n	800056a <__udivmoddi4+0x2be>
 800048a:	42ab      	cmp	r3, r5
 800048c:	d96d      	bls.n	800056a <__udivmoddi4+0x2be>
 800048e:	3802      	subs	r0, #2
 8000490:	443d      	add	r5, r7
 8000492:	1aeb      	subs	r3, r5, r3
 8000494:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000498:	e78f      	b.n	80003ba <__udivmoddi4+0x10e>
 800049a:	f1c1 0720 	rsb	r7, r1, #32
 800049e:	fa22 f807 	lsr.w	r8, r2, r7
 80004a2:	408b      	lsls	r3, r1
 80004a4:	fa05 f401 	lsl.w	r4, r5, r1
 80004a8:	ea48 0303 	orr.w	r3, r8, r3
 80004ac:	fa20 fe07 	lsr.w	lr, r0, r7
 80004b0:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004b4:	40fd      	lsrs	r5, r7
 80004b6:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ba:	fbb5 f9fc 	udiv	r9, r5, ip
 80004be:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004c2:	fb0c 5519 	mls	r5, ip, r9, r5
 80004c6:	fa1f f883 	uxth.w	r8, r3
 80004ca:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004ce:	fb09 f408 	mul.w	r4, r9, r8
 80004d2:	42ac      	cmp	r4, r5
 80004d4:	fa02 f201 	lsl.w	r2, r2, r1
 80004d8:	fa00 fa01 	lsl.w	sl, r0, r1
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x244>
 80004de:	18ed      	adds	r5, r5, r3
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004e4:	d243      	bcs.n	800056e <__udivmoddi4+0x2c2>
 80004e6:	42ac      	cmp	r4, r5
 80004e8:	d941      	bls.n	800056e <__udivmoddi4+0x2c2>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	441d      	add	r5, r3
 80004f0:	1b2d      	subs	r5, r5, r4
 80004f2:	fa1f fe8e 	uxth.w	lr, lr
 80004f6:	fbb5 f0fc 	udiv	r0, r5, ip
 80004fa:	fb0c 5510 	mls	r5, ip, r0, r5
 80004fe:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45a0      	cmp	r8, r4
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x26e>
 800050a:	18e4      	adds	r4, r4, r3
 800050c:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000510:	d229      	bcs.n	8000566 <__udivmoddi4+0x2ba>
 8000512:	45a0      	cmp	r8, r4
 8000514:	d927      	bls.n	8000566 <__udivmoddi4+0x2ba>
 8000516:	3802      	subs	r0, #2
 8000518:	441c      	add	r4, r3
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba4 0408 	sub.w	r4, r4, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454c      	cmp	r4, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	464d      	mov	r5, r9
 800052c:	d315      	bcc.n	800055a <__udivmoddi4+0x2ae>
 800052e:	d012      	beq.n	8000556 <__udivmoddi4+0x2aa>
 8000530:	b156      	cbz	r6, 8000548 <__udivmoddi4+0x29c>
 8000532:	ebba 030e 	subs.w	r3, sl, lr
 8000536:	eb64 0405 	sbc.w	r4, r4, r5
 800053a:	fa04 f707 	lsl.w	r7, r4, r7
 800053e:	40cb      	lsrs	r3, r1
 8000540:	431f      	orrs	r7, r3
 8000542:	40cc      	lsrs	r4, r1
 8000544:	6037      	str	r7, [r6, #0]
 8000546:	6074      	str	r4, [r6, #4]
 8000548:	2100      	movs	r1, #0
 800054a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800054e:	4618      	mov	r0, r3
 8000550:	e6f8      	b.n	8000344 <__udivmoddi4+0x98>
 8000552:	4690      	mov	r8, r2
 8000554:	e6e0      	b.n	8000318 <__udivmoddi4+0x6c>
 8000556:	45c2      	cmp	sl, r8
 8000558:	d2ea      	bcs.n	8000530 <__udivmoddi4+0x284>
 800055a:	ebb8 0e02 	subs.w	lr, r8, r2
 800055e:	eb69 0503 	sbc.w	r5, r9, r3
 8000562:	3801      	subs	r0, #1
 8000564:	e7e4      	b.n	8000530 <__udivmoddi4+0x284>
 8000566:	4628      	mov	r0, r5
 8000568:	e7d7      	b.n	800051a <__udivmoddi4+0x26e>
 800056a:	4640      	mov	r0, r8
 800056c:	e791      	b.n	8000492 <__udivmoddi4+0x1e6>
 800056e:	4681      	mov	r9, r0
 8000570:	e7be      	b.n	80004f0 <__udivmoddi4+0x244>
 8000572:	4601      	mov	r1, r0
 8000574:	e778      	b.n	8000468 <__udivmoddi4+0x1bc>
 8000576:	3802      	subs	r0, #2
 8000578:	443c      	add	r4, r7
 800057a:	e745      	b.n	8000408 <__udivmoddi4+0x15c>
 800057c:	4608      	mov	r0, r1
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xe6>
 8000580:	f1a8 0802 	sub.w	r8, r8, #2
 8000584:	443d      	add	r5, r7
 8000586:	e72b      	b.n	80003e0 <__udivmoddi4+0x134>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <atexit>:
 800058c:	2300      	movs	r3, #0
 800058e:	4601      	mov	r1, r0
 8000590:	461a      	mov	r2, r3
 8000592:	4618      	mov	r0, r3
 8000594:	f000 b83e 	b.w	8000614 <__register_exitproc>

08000598 <__libc_fini_array>:
 8000598:	b538      	push	{r3, r4, r5, lr}
 800059a:	4c0a      	ldr	r4, [pc, #40]	; (80005c4 <__libc_fini_array+0x2c>)
 800059c:	4d0a      	ldr	r5, [pc, #40]	; (80005c8 <__libc_fini_array+0x30>)
 800059e:	1b64      	subs	r4, r4, r5
 80005a0:	10a4      	asrs	r4, r4, #2
 80005a2:	d00a      	beq.n	80005ba <__libc_fini_array+0x22>
 80005a4:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 80005a8:	3b01      	subs	r3, #1
 80005aa:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 80005ae:	3c01      	subs	r4, #1
 80005b0:	f855 3904 	ldr.w	r3, [r5], #-4
 80005b4:	4798      	blx	r3
 80005b6:	2c00      	cmp	r4, #0
 80005b8:	d1f9      	bne.n	80005ae <__libc_fini_array+0x16>
 80005ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80005be:	f000 bf33 	b.w	8001428 <_fini>
 80005c2:	bf00      	nop
 80005c4:	0800145c 	.word	0x0800145c
 80005c8:	08001458 	.word	0x08001458

080005cc <__libc_init_array>:
 80005cc:	b570      	push	{r4, r5, r6, lr}
 80005ce:	4e0d      	ldr	r6, [pc, #52]	; (8000604 <__libc_init_array+0x38>)
 80005d0:	4d0d      	ldr	r5, [pc, #52]	; (8000608 <__libc_init_array+0x3c>)
 80005d2:	1b76      	subs	r6, r6, r5
 80005d4:	10b6      	asrs	r6, r6, #2
 80005d6:	d006      	beq.n	80005e6 <__libc_init_array+0x1a>
 80005d8:	2400      	movs	r4, #0
 80005da:	3401      	adds	r4, #1
 80005dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80005e0:	4798      	blx	r3
 80005e2:	42a6      	cmp	r6, r4
 80005e4:	d1f9      	bne.n	80005da <__libc_init_array+0xe>
 80005e6:	4e09      	ldr	r6, [pc, #36]	; (800060c <__libc_init_array+0x40>)
 80005e8:	4d09      	ldr	r5, [pc, #36]	; (8000610 <__libc_init_array+0x44>)
 80005ea:	1b76      	subs	r6, r6, r5
 80005ec:	f000 ff16 	bl	800141c <_init>
 80005f0:	10b6      	asrs	r6, r6, #2
 80005f2:	d006      	beq.n	8000602 <__libc_init_array+0x36>
 80005f4:	2400      	movs	r4, #0
 80005f6:	3401      	adds	r4, #1
 80005f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80005fc:	4798      	blx	r3
 80005fe:	42a6      	cmp	r6, r4
 8000600:	d1f9      	bne.n	80005f6 <__libc_init_array+0x2a>
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	08001450 	.word	0x08001450
 8000608:	08001450 	.word	0x08001450
 800060c:	08001458 	.word	0x08001458
 8000610:	08001450 	.word	0x08001450

08000614 <__register_exitproc>:
 8000614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000618:	4c24      	ldr	r4, [pc, #144]	; (80006ac <__register_exitproc+0x98>)
 800061a:	6825      	ldr	r5, [r4, #0]
 800061c:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
 8000620:	4606      	mov	r6, r0
 8000622:	4688      	mov	r8, r1
 8000624:	4692      	mov	sl, r2
 8000626:	4699      	mov	r9, r3
 8000628:	b3bc      	cbz	r4, 800069a <__register_exitproc+0x86>
 800062a:	6860      	ldr	r0, [r4, #4]
 800062c:	281f      	cmp	r0, #31
 800062e:	dc08      	bgt.n	8000642 <__register_exitproc+0x2e>
 8000630:	1c43      	adds	r3, r0, #1
 8000632:	b9ee      	cbnz	r6, 8000670 <__register_exitproc+0x5c>
 8000634:	3002      	adds	r0, #2
 8000636:	6063      	str	r3, [r4, #4]
 8000638:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
 800063c:	2000      	movs	r0, #0
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	4b1b      	ldr	r3, [pc, #108]	; (80006b0 <__register_exitproc+0x9c>)
 8000644:	b373      	cbz	r3, 80006a4 <__register_exitproc+0x90>
 8000646:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800064a:	f3af 8000 	nop.w
 800064e:	4604      	mov	r4, r0
 8000650:	b340      	cbz	r0, 80006a4 <__register_exitproc+0x90>
 8000652:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 8000656:	2700      	movs	r7, #0
 8000658:	e9c0 3700 	strd	r3, r7, [r0]
 800065c:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 8000660:	4638      	mov	r0, r7
 8000662:	2301      	movs	r3, #1
 8000664:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
 8000668:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
 800066c:	2e00      	cmp	r6, #0
 800066e:	d0e1      	beq.n	8000634 <__register_exitproc+0x20>
 8000670:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8000674:	2201      	movs	r2, #1
 8000676:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
 800067a:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
 800067e:	4082      	lsls	r2, r0
 8000680:	4311      	orrs	r1, r2
 8000682:	2e02      	cmp	r6, #2
 8000684:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
 8000688:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
 800068c:	d1d2      	bne.n	8000634 <__register_exitproc+0x20>
 800068e:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
 8000692:	430a      	orrs	r2, r1
 8000694:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
 8000698:	e7cc      	b.n	8000634 <__register_exitproc+0x20>
 800069a:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
 800069e:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 80006a2:	e7c2      	b.n	800062a <__register_exitproc+0x16>
 80006a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80006a8:	e7c9      	b.n	800063e <__register_exitproc+0x2a>
 80006aa:	bf00      	nop
 80006ac:	08001434 	.word	0x08001434
 80006b0:	00000000 	.word	0x00000000

080006b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 80006b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006ec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80006b8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80006ba:	e003      	b.n	80006c4 <LoopCopyDataInit>

080006bc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80006bc:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80006be:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80006c0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80006c2:	3104      	adds	r1, #4

080006c4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80006c4:	480b      	ldr	r0, [pc, #44]	; (80006f4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80006c6:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80006c8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80006ca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80006cc:	d3f6      	bcc.n	80006bc <CopyDataInit>
  ldr  r2, =_sbss
 80006ce:	4a0b      	ldr	r2, [pc, #44]	; (80006fc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80006d0:	e002      	b.n	80006d8 <LoopFillZerobss>

080006d2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80006d2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80006d4:	f842 3b04 	str.w	r3, [r2], #4

080006d8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80006d8:	4b09      	ldr	r3, [pc, #36]	; (8000700 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80006da:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80006dc:	d3f9      	bcc.n	80006d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80006de:	f000 f8b5 	bl	800084c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006e2:	f7ff ff73 	bl	80005cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80006e6:	f000 f89f 	bl	8000828 <main>
  bx  lr    
 80006ea:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80006ec:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80006f0:	0800145c 	.word	0x0800145c
  ldr  r0, =_sdata
 80006f4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80006f8:	2000043c 	.word	0x2000043c
  ldr  r2, =_sbss
 80006fc:	2000043c 	.word	0x2000043c
  ldr  r3, = _ebss
 8000700:	2000045c 	.word	0x2000045c

08000704 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000704:	e7fe      	b.n	8000704 <ADC_IRQHandler>
	...

08000708 <Led_Init>:
#include "gpio.h"

void Led_Init(void) {
 8000708:	b530      	push	{r4, r5, lr}
 800070a:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOB_CLK_ENABLE();
 800070c:	2400      	movs	r4, #0
 800070e:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <Led_Init+0x40>)
 8000710:	9400      	str	r4, [sp, #0]
 8000712:	6b1a      	ldr	r2, [r3, #48]	; 0x30

  HAL_GPIO_WritePin(LED1_PORT, LED1_PIN, GPIO_PIN_RESET);
 8000714:	4d0d      	ldr	r5, [pc, #52]	; (800074c <Led_Init+0x44>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000716:	f042 0202 	orr.w	r2, r2, #2
 800071a:	631a      	str	r2, [r3, #48]	; 0x30
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	f003 0302 	and.w	r3, r3, #2
 8000722:	9300      	str	r3, [sp, #0]
  HAL_GPIO_WritePin(LED1_PORT, LED1_PIN, GPIO_PIN_RESET);
 8000724:	4622      	mov	r2, r4
 8000726:	4628      	mov	r0, r5
 8000728:	2101      	movs	r1, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800072a:	9b00      	ldr	r3, [sp, #0]
  HAL_GPIO_WritePin(LED1_PORT, LED1_PIN, GPIO_PIN_RESET);
 800072c:	f000 fd2e 	bl	800118c <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = LED1_PIN;
 8000730:	2301      	movs	r3, #1
 8000732:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000734:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(LED1_PORT, &GPIO_InitStruct);
 8000736:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000738:	2302      	movs	r3, #2
  HAL_GPIO_Init(LED1_PORT, &GPIO_InitStruct);
 800073a:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800073e:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(LED1_PORT, &GPIO_InitStruct);
 8000740:	f000 fc4a 	bl	8000fd8 <HAL_GPIO_Init>
}
 8000744:	b007      	add	sp, #28
 8000746:	bd30      	pop	{r4, r5, pc}
 8000748:	40023800 	.word	0x40023800
 800074c:	40020400 	.word	0x40020400

08000750 <SysTick_Handler>:
#include "stm32f4xx_hal.h"
#include "main.h"

void SysTick_Handler(void) {
 8000750:	b508      	push	{r3, lr}
	HAL_IncTick();
 8000752:	f000 fe33 	bl	80013bc <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
}
 8000756:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_SYSTICK_IRQHandler();
 800075a:	f000 b900 	b.w	800095e <HAL_SYSTICK_IRQHandler>
	...

08000760 <SystemClock_Config>:
void _Error_Handler(char *file, int line) {
	while(1) {} // Hang on error
}


void SystemClock_Config(void) {
 8000760:	b570      	push	{r4, r5, r6, lr}
 8000762:	b0aa      	sub	sp, #168	; 0xa8
	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

	// Configure the main internal regulator output voltage 
	__HAL_RCC_PWR_CLK_ENABLE();
 8000764:	4b2e      	ldr	r3, [pc, #184]	; (8000820 <SystemClock_Config+0xc0>)
 8000766:	2100      	movs	r1, #0
 8000768:	9100      	str	r1, [sp, #0]
 800076a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800076c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000770:	641a      	str	r2, [r3, #64]	; 0x40
 8000772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000778:	9300      	str	r3, [sp, #0]
 800077a:	9b00      	ldr	r3, [sp, #0]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800077c:	4b29      	ldr	r3, [pc, #164]	; (8000824 <SystemClock_Config+0xc4>)
 800077e:	9101      	str	r1, [sp, #4]
 8000780:	681a      	ldr	r2, [r3, #0]
 8000782:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800078e:	9301      	str	r3, [sp, #4]
 8000790:	9b01      	ldr	r3, [sp, #4]

    // Initializes the CPU, AHB and APB busses clocks 
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000792:	2305      	movs	r3, #5
 8000794:	9307      	str	r3, [sp, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000796:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800079a:	9308      	str	r3, [sp, #32]
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800079c:	2301      	movs	r3, #1
 800079e:	9309      	str	r3, [sp, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007a4:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 16;
 80007a6:	2310      	movs	r3, #16
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a8:	2402      	movs	r4, #2
	RCC_OscInitStruct.PLL.PLLM = 16;
 80007aa:	930f      	str	r3, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 256;
 80007ac:	f44f 7680 	mov.w	r6, #256	; 0x100
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007b0:	2504      	movs	r5, #4
	RCC_OscInitStruct.PLL.PLLQ = 8;
 80007b2:	2308      	movs	r3, #8
	RCC_OscInitStruct.PLL.PLLR = 2;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80007b4:	a807      	add	r0, sp, #28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b6:	940d      	str	r4, [sp, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLN = 256;
 80007b8:	9610      	str	r6, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007ba:	9511      	str	r5, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 8;
 80007bc:	9312      	str	r3, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 80007be:	9413      	str	r4, [sp, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80007c0:	f000 fa86 	bl	8000cd0 <HAL_RCC_OscConfig>
 80007c4:	b100      	cbz	r0, 80007c8 <SystemClock_Config+0x68>
 80007c6:	e7fe      	b.n	80007c6 <SystemClock_Config+0x66>
		_Error_Handler(__FILE__, __LINE__);
	}

    // Initializes the CPU, AHB and APB busses clocks 
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c8:	230f      	movs	r3, #15
 80007ca:	9302      	str	r3, [sp, #8]
								|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007cc:	9004      	str	r0, [sp, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007d2:	9006      	str	r0, [sp, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 80007d4:	2103      	movs	r1, #3
 80007d6:	a802      	add	r0, sp, #8
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d8:	9403      	str	r4, [sp, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007da:	9305      	str	r3, [sp, #20]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 80007dc:	f000 fd0e 	bl	80011fc <HAL_RCC_ClockConfig>
 80007e0:	b100      	cbz	r0, 80007e4 <SystemClock_Config+0x84>
 80007e2:	e7fe      	b.n	80007e2 <SystemClock_Config+0x82>
		_Error_Handler(__FILE__, __LINE__);
	}

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_SDIO
 80007e4:	2368      	movs	r3, #104	; 0x68
								|RCC_PERIPHCLK_CLK48;
	PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80007e6:	9020      	str	r0, [sp, #128]	; 0x80
	PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 80007e8:	901e      	str	r0, [sp, #120]	; 0x78
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007ea:	a814      	add	r0, sp, #80	; 0x50
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_SDIO
 80007ec:	9314      	str	r3, [sp, #80]	; 0x50
	PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80007ee:	961d      	str	r6, [sp, #116]	; 0x74
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007f0:	f000 f8ba 	bl	8000968 <HAL_RCCEx_PeriphCLKConfig>
 80007f4:	4604      	mov	r4, r0
 80007f6:	b100      	cbz	r0, 80007fa <SystemClock_Config+0x9a>
 80007f8:	e7fe      	b.n	80007f8 <SystemClock_Config+0x98>
	{
		_Error_Handler(__FILE__, __LINE__);
	}

	// Configure the Systick interrupt time 
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80007fa:	f000 fd99 	bl	8001330 <HAL_RCC_GetHCLKFreq>
 80007fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000802:	fbb0 f0f3 	udiv	r0, r0, r3
 8000806:	f000 f887 	bl	8000918 <HAL_SYSTICK_Config>

	// Configure the Systick 
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800080a:	4628      	mov	r0, r5
 800080c:	f000 f89a 	bl	8000944 <HAL_SYSTICK_CLKSourceConfig>

	// SysTick_IRQn interrupt configuration
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000810:	4622      	mov	r2, r4
 8000812:	4621      	mov	r1, r4
 8000814:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000818:	f000 f84a 	bl	80008b0 <HAL_NVIC_SetPriority>
}
 800081c:	b02a      	add	sp, #168	; 0xa8
 800081e:	bd70      	pop	{r4, r5, r6, pc}
 8000820:	40023800 	.word	0x40023800
 8000824:	40007000 	.word	0x40007000

08000828 <main>:

int main(void) {
 8000828:	b508      	push	{r3, lr}
	// General initialization
	HAL_Init();
 800082a:	f000 fdad 	bl	8001388 <HAL_Init>
	SystemClock_Config();
 800082e:	f7ff ff97 	bl	8000760 <SystemClock_Config>
	Led_Init();
 8000832:	f7ff ff69 	bl	8000708 <Led_Init>

	while(1) {
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000836:	4c04      	ldr	r4, [pc, #16]	; (8000848 <main+0x20>)
 8000838:	4620      	mov	r0, r4
 800083a:	2101      	movs	r1, #1
 800083c:	f000 fcab 	bl	8001196 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000840:	2064      	movs	r0, #100	; 0x64
 8000842:	f000 fdcd 	bl	80013e0 <HAL_Delay>
 8000846:	e7f7      	b.n	8000838 <main+0x10>
 8000848:	40020400 	.word	0x40020400

0800084c <SystemInit>:
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800084c:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <SystemInit+0x34>)
 800084e:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000850:	2100      	movs	r1, #0
  RCC->CR |= (uint32_t)0x00000001;
 8000852:	f042 0201 	orr.w	r2, r2, #1
 8000856:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8000858:	6099      	str	r1, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800085a:	681a      	ldr	r2, [r3, #0]
 800085c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000860:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000864:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000866:	4a07      	ldr	r2, [pc, #28]	; (8000884 <SystemInit+0x38>)
 8000868:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800086a:	681a      	ldr	r2, [r3, #0]
 800086c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000870:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000872:	60d9      	str	r1, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000874:	4b04      	ldr	r3, [pc, #16]	; (8000888 <SystemInit+0x3c>)
 8000876:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800087a:	609a      	str	r2, [r3, #8]
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	40023800 	.word	0x40023800
 8000884:	24003010 	.word	0x24003010
 8000888:	e000ed00 	.word	0xe000ed00

0800088c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800088c:	4a07      	ldr	r2, [pc, #28]	; (80008ac <HAL_NVIC_SetPriorityGrouping+0x20>)
 800088e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000890:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000894:	041b      	lsls	r3, r3, #16
 8000896:	0c1b      	lsrs	r3, r3, #16
 8000898:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800089c:	0200      	lsls	r0, r0, #8
 800089e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008a2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80008a6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80008a8:	60d3      	str	r3, [r2, #12]
 80008aa:	4770      	bx	lr
 80008ac:	e000ed00 	.word	0xe000ed00

080008b0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008b0:	4b17      	ldr	r3, [pc, #92]	; (8000910 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008b2:	b530      	push	{r4, r5, lr}
 80008b4:	68dc      	ldr	r4, [r3, #12]
 80008b6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008ba:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008be:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008c0:	2b04      	cmp	r3, #4
 80008c2:	bf28      	it	cs
 80008c4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008c6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008c8:	f04f 0501 	mov.w	r5, #1
 80008cc:	fa05 f303 	lsl.w	r3, r5, r3
 80008d0:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008d4:	bf8c      	ite	hi
 80008d6:	3c03      	subhi	r4, #3
 80008d8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008da:	4019      	ands	r1, r3
 80008dc:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008de:	fa05 f404 	lsl.w	r4, r5, r4
 80008e2:	3c01      	subs	r4, #1
 80008e4:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80008e6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008e8:	ea42 0201 	orr.w	r2, r2, r1
 80008ec:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008f0:	bfaf      	iteee	ge
 80008f2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008f6:	f000 000f 	andlt.w	r0, r0, #15
 80008fa:	4b06      	ldrlt	r3, [pc, #24]	; (8000914 <HAL_NVIC_SetPriority+0x64>)
 80008fc:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008fe:	bfa5      	ittet	ge
 8000900:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000904:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000906:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000908:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800090c:	bd30      	pop	{r4, r5, pc}
 800090e:	bf00      	nop
 8000910:	e000ed00 	.word	0xe000ed00
 8000914:	e000ed14 	.word	0xe000ed14

08000918 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000918:	3801      	subs	r0, #1
 800091a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800091e:	d20a      	bcs.n	8000936 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000920:	4b06      	ldr	r3, [pc, #24]	; (800093c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000922:	4a07      	ldr	r2, [pc, #28]	; (8000940 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000924:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000926:	21f0      	movs	r1, #240	; 0xf0
 8000928:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800092c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800092e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000930:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000936:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	e000e010 	.word	0xe000e010
 8000940:	e000ed00 	.word	0xe000ed00

08000944 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000944:	4b04      	ldr	r3, [pc, #16]	; (8000958 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000946:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000948:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800094a:	bf0c      	ite	eq
 800094c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000950:	f022 0204 	bicne.w	r2, r2, #4
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	4770      	bx	lr
 8000958:	e000e010 	.word	0xe000e010

0800095c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800095c:	4770      	bx	lr

0800095e <HAL_SYSTICK_IRQHandler>:
{
 800095e:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000960:	f7ff fffc 	bl	800095c <HAL_SYSTICK_Callback>
 8000964:	bd08      	pop	{r3, pc}
	...

08000968 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8000968:	6803      	ldr	r3, [r0, #0]
{
 800096a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800096e:	f013 0501 	ands.w	r5, r3, #1
{
 8000972:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8000974:	d00b      	beq.n	800098e <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8000976:	498f      	ldr	r1, [pc, #572]	; (8000bb4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8000978:	69c5      	ldr	r5, [r0, #28]
 800097a:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 800097e:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8000982:	432a      	orrs	r2, r5
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8000984:	fab5 f585 	clz	r5, r5
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8000988:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800098c:	096d      	lsrs	r5, r5, #5
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800098e:	079a      	lsls	r2, r3, #30
 8000990:	d50b      	bpl.n	80009aa <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8000992:	4888      	ldr	r0, [pc, #544]	; (8000bb4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8000994:	6a21      	ldr	r1, [r4, #32]
 8000996:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 800099a:	f022 52c0 	bic.w	r2, r2, #402653184	; 0x18000000
 800099e:	430a      	orrs	r2, r1
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
    {
      plli2sused = 1U;
 80009a0:	2900      	cmp	r1, #0
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80009a2:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
      plli2sused = 1U;
 80009a6:	bf08      	it	eq
 80009a8:	2501      	moveq	r5, #1
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 80009aa:	049f      	lsls	r7, r3, #18
 80009ac:	d518      	bpl.n	80009e0 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 80009ae:	4981      	ldr	r1, [pc, #516]	; (8000bb4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80009b0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80009b2:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 80009b6:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80009ba:	4302      	orrs	r2, r0
 80009bc:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 80009c0:	2800      	cmp	r0, #0
 80009c2:	f000 80c2 	beq.w	8000b4a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      plli2sused = 1U;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 80009c6:	f5b0 1f00 	cmp.w	r0, #2097152	; 0x200000
 80009ca:	d109      	bne.n	80009e0 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 80009cc:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 80009d0:	6960      	ldr	r0, [r4, #20]
 80009d2:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 80009d6:	3801      	subs	r0, #1
 80009d8:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80009dc:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 80009e0:	045e      	lsls	r6, r3, #17
 80009e2:	d518      	bpl.n	8000a16 <HAL_RCCEx_PeriphCLKConfig+0xae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 80009e4:	4973      	ldr	r1, [pc, #460]	; (8000bb4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80009e6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80009e8:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 80009ec:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80009f0:	4302      	orrs	r2, r0
 80009f2:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 80009f6:	2800      	cmp	r0, #0
 80009f8:	f000 80a9 	beq.w	8000b4e <HAL_RCCEx_PeriphCLKConfig+0x1e6>
    {
      plli2sused = 1U;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 80009fc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a00:	d109      	bne.n	8000a16 <HAL_RCCEx_PeriphCLKConfig+0xae>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8000a02:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8000a06:	6960      	ldr	r0, [r4, #20]
 8000a08:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 8000a0c:	3801      	subs	r0, #1
 8000a0e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8000a12:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000a16:	0718      	lsls	r0, r3, #28
 8000a18:	d533      	bpl.n	8000a82 <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	9301      	str	r3, [sp, #4]
 8000a1e:	4b65      	ldr	r3, [pc, #404]	; (8000bb4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8000a20:	4e65      	ldr	r6, [pc, #404]	; (8000bb8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8000a22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a24:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a28:	641a      	str	r2, [r3, #64]	; 0x40
 8000a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a30:	9301      	str	r3, [sp, #4]
 8000a32:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8000a34:	6833      	ldr	r3, [r6, #0]
 8000a36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a3a:	6033      	str	r3, [r6, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000a3c:	f000 fcca 	bl	80013d4 <HAL_GetTick>
 8000a40:	4607      	mov	r7, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000a42:	6833      	ldr	r3, [r6, #0]
 8000a44:	05d9      	lsls	r1, r3, #23
 8000a46:	f140 8084 	bpl.w	8000b52 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
      {
        return HAL_TIMEOUT;
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000a4a:	4e5a      	ldr	r6, [pc, #360]	; (8000bb4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8000a4c:	6f33      	ldr	r3, [r6, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000a4e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8000a52:	f040 8088 	bne.w	8000b66 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000a56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000a58:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8000a5c:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8000a60:	4a54      	ldr	r2, [pc, #336]	; (8000bb4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8000a62:	f040 80a2 	bne.w	8000baa <HAL_RCCEx_PeriphCLKConfig+0x242>
 8000a66:	6891      	ldr	r1, [r2, #8]
 8000a68:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8000a6c:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8000a70:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8000a74:	4301      	orrs	r1, r0
 8000a76:	6091      	str	r1, [r2, #8]
 8000a78:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8000a7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000a7e:	430b      	orrs	r3, r1
 8000a80:	6713      	str	r3, [r2, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8000a82:	6823      	ldr	r3, [r4, #0]
 8000a84:	075f      	lsls	r7, r3, #29
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8000a86:	bf42      	ittt	mi
 8000a88:	4b4c      	ldrmi	r3, [pc, #304]	; (8000bbc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8000a8a:	f894 2054 	ldrbmi.w	r2, [r4, #84]	; 0x54
 8000a8e:	601a      	strmi	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8000a90:	6822      	ldr	r2, [r4, #0]
 8000a92:	06d6      	lsls	r6, r2, #27
 8000a94:	d508      	bpl.n	8000aa8 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8000a96:	4947      	ldr	r1, [pc, #284]	; (8000bb4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8000a98:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8000a9a:	f8d1 3094 	ldr.w	r3, [r1, #148]	; 0x94
 8000a9e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000aa2:	4303      	orrs	r3, r0
 8000aa4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8000aa8:	0690      	lsls	r0, r2, #26
 8000aaa:	d50c      	bpl.n	8000ac6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8000aac:	4841      	ldr	r0, [pc, #260]	; (8000bb4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8000aae:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000ab0:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
 8000ab4:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8000ab8:	430b      	orrs	r3, r1

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
    {
      plli2sused = 1U;
 8000aba:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8000abe:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
      plli2sused = 1U;
 8000ac2:	bf08      	it	eq
 8000ac4:	2501      	moveq	r5, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8000ac6:	0651      	lsls	r1, r2, #25
 8000ac8:	d508      	bpl.n	8000adc <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8000aca:	493a      	ldr	r1, [pc, #232]	; (8000bb4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8000acc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000ace:	f8d1 3094 	ldr.w	r3, [r1, #148]	; 0x94
 8000ad2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ad6:	4303      	orrs	r3, r0
 8000ad8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8000adc:	2d01      	cmp	r5, #1
 8000ade:	d071      	beq.n	8000bc4 <HAL_RCCEx_PeriphCLKConfig+0x25c>
 8000ae0:	2a80      	cmp	r2, #128	; 0x80
 8000ae2:	d06f      	beq.n	8000bc4 <HAL_RCCEx_PeriphCLKConfig+0x25c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8000ae4:	6820      	ldr	r0, [r4, #0]
 8000ae6:	05c2      	lsls	r2, r0, #23
 8000ae8:	f100 80e2 	bmi.w	8000cb0 <HAL_RCCEx_PeriphCLKConfig+0x348>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8000aec:	0581      	lsls	r1, r0, #22
 8000aee:	d508      	bpl.n	8000b02 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8000af0:	4a30      	ldr	r2, [pc, #192]	; (8000bb4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8000af2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8000af4:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8000af8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000afc:	430b      	orrs	r3, r1
 8000afe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8000b02:	0542      	lsls	r2, r0, #21
 8000b04:	d508      	bpl.n	8000b18 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8000b06:	4a2b      	ldr	r2, [pc, #172]	; (8000bb4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8000b08:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8000b0a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8000b0e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000b12:	430b      	orrs	r3, r1
 8000b14:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 8000b18:	0503      	lsls	r3, r0, #20
 8000b1a:	d508      	bpl.n	8000b2e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 8000b1c:	4a25      	ldr	r2, [pc, #148]	; (8000bb4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8000b1e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000b20:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8000b24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000b28:	430b      	orrs	r3, r1
 8000b2a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8000b2e:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 8000b32:	d015      	beq.n	8000b60 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8000b34:	4a1f      	ldr	r2, [pc, #124]	; (8000bb4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8000b36:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8000b38:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8000b3c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8000b40:	430b      	orrs	r3, r1
 8000b42:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8000b46:	2000      	movs	r0, #0
 8000b48:	e00a      	b.n	8000b60 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      plli2sused = 1U;
 8000b4a:	2501      	movs	r5, #1
 8000b4c:	e748      	b.n	80009e0 <HAL_RCCEx_PeriphCLKConfig+0x78>
      plli2sused = 1U;
 8000b4e:	2501      	movs	r5, #1
 8000b50:	e761      	b.n	8000a16 <HAL_RCCEx_PeriphCLKConfig+0xae>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000b52:	f000 fc3f 	bl	80013d4 <HAL_GetTick>
 8000b56:	1bc0      	subs	r0, r0, r7
 8000b58:	2802      	cmp	r0, #2
 8000b5a:	f67f af72 	bls.w	8000a42 <HAL_RCCEx_PeriphCLKConfig+0xda>
        return HAL_TIMEOUT;
 8000b5e:	2003      	movs	r0, #3
}
 8000b60:	b002      	add	sp, #8
 8000b62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000b66:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b68:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	f43f af72 	beq.w	8000a56 <HAL_RCCEx_PeriphCLKConfig+0xee>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000b72:	6f33      	ldr	r3, [r6, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8000b74:	4a12      	ldr	r2, [pc, #72]	; (8000bc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8000b76:	2101      	movs	r1, #1
 8000b78:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000b7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000b7e:	2100      	movs	r1, #0
 8000b80:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 8000b82:	6733      	str	r3, [r6, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8000b84:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8000b86:	07da      	lsls	r2, r3, #31
 8000b88:	f57f af65 	bpl.w	8000a56 <HAL_RCCEx_PeriphCLKConfig+0xee>
        tickstart = HAL_GetTick();
 8000b8c:	f000 fc22 	bl	80013d4 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b90:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8000b94:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b96:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8000b98:	079b      	lsls	r3, r3, #30
 8000b9a:	f53f af5c 	bmi.w	8000a56 <HAL_RCCEx_PeriphCLKConfig+0xee>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b9e:	f000 fc19 	bl	80013d4 <HAL_GetTick>
 8000ba2:	1bc0      	subs	r0, r0, r7
 8000ba4:	4540      	cmp	r0, r8
 8000ba6:	d9f6      	bls.n	8000b96 <HAL_RCCEx_PeriphCLKConfig+0x22e>
 8000ba8:	e7d9      	b.n	8000b5e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000baa:	6891      	ldr	r1, [r2, #8]
 8000bac:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8000bb0:	e761      	b.n	8000a76 <HAL_RCCEx_PeriphCLKConfig+0x10e>
 8000bb2:	bf00      	nop
 8000bb4:	40023800 	.word	0x40023800
 8000bb8:	40007000 	.word	0x40007000
 8000bbc:	424711e0 	.word	0x424711e0
 8000bc0:	42470e40 	.word	0x42470e40
    __HAL_RCC_PLLI2S_DISABLE();
 8000bc4:	4d3f      	ldr	r5, [pc, #252]	; (8000cc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8000bc6:	4e40      	ldr	r6, [pc, #256]	; (8000cc8 <HAL_RCCEx_PeriphCLKConfig+0x360>)
    __HAL_RCC_PLLI2S_DISABLE();
 8000bc8:	2300      	movs	r3, #0
 8000bca:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8000bcc:	f000 fc02 	bl	80013d4 <HAL_GetTick>
 8000bd0:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8000bd2:	6833      	ldr	r3, [r6, #0]
 8000bd4:	011b      	lsls	r3, r3, #4
 8000bd6:	d465      	bmi.n	8000ca4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8000bd8:	4b3c      	ldr	r3, [pc, #240]	; (8000ccc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8000bda:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8000bdc:	601a      	str	r2, [r3, #0]
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8000bde:	6822      	ldr	r2, [r4, #0]
 8000be0:	07d7      	lsls	r7, r2, #31
 8000be2:	d501      	bpl.n	8000be8 <HAL_RCCEx_PeriphCLKConfig+0x280>
 8000be4:	69e3      	ldr	r3, [r4, #28]
 8000be6:	b18b      	cbz	r3, 8000c0c <HAL_RCCEx_PeriphCLKConfig+0x2a4>
 8000be8:	0796      	lsls	r6, r2, #30
 8000bea:	d501      	bpl.n	8000bf0 <HAL_RCCEx_PeriphCLKConfig+0x288>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8000bec:	6a23      	ldr	r3, [r4, #32]
 8000bee:	b16b      	cbz	r3, 8000c0c <HAL_RCCEx_PeriphCLKConfig+0x2a4>
 8000bf0:	0690      	lsls	r0, r2, #26
 8000bf2:	d503      	bpl.n	8000bfc <HAL_RCCEx_PeriphCLKConfig+0x294>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8000bf4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000bf6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000bfa:	d007      	beq.n	8000c0c <HAL_RCCEx_PeriphCLKConfig+0x2a4>
 8000bfc:	0651      	lsls	r1, r2, #25
 8000bfe:	d512      	bpl.n	8000c26 <HAL_RCCEx_PeriphCLKConfig+0x2be>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8000c00:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000c02:	b983      	cbnz	r3, 8000c26 <HAL_RCCEx_PeriphCLKConfig+0x2be>
 8000c04:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000c06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000c0a:	d10c      	bne.n	8000c26 <HAL_RCCEx_PeriphCLKConfig+0x2be>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8000c0c:	68e3      	ldr	r3, [r4, #12]
 8000c0e:	68a1      	ldr	r1, [r4, #8]
 8000c10:	061b      	lsls	r3, r3, #24
 8000c12:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8000c16:	6861      	ldr	r1, [r4, #4]
 8000c18:	430b      	orrs	r3, r1
 8000c1a:	6921      	ldr	r1, [r4, #16]
 8000c1c:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8000c20:	4929      	ldr	r1, [pc, #164]	; (8000cc8 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8000c22:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8000c26:	0493      	lsls	r3, r2, #18
 8000c28:	d501      	bpl.n	8000c2e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
 8000c2a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000c2c:	b11b      	cbz	r3, 8000c36 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8000c2e:	0457      	lsls	r7, r2, #17
 8000c30:	d519      	bpl.n	8000c66 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8000c32:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000c34:	b9bb      	cbnz	r3, 8000c66 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8000c36:	4924      	ldr	r1, [pc, #144]	; (8000cc8 <HAL_RCCEx_PeriphCLKConfig+0x360>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8000c38:	6860      	ldr	r0, [r4, #4]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8000c3a:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8000c3e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8000c42:	4303      	orrs	r3, r0
 8000c44:	68a0      	ldr	r0, [r4, #8]
 8000c46:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8000c4a:	6920      	ldr	r0, [r4, #16]
 8000c4c:	ea43 7300 	orr.w	r3, r3, r0, lsl #28
 8000c50:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 8000c54:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8000c58:	69a3      	ldr	r3, [r4, #24]
 8000c5a:	f020 001f 	bic.w	r0, r0, #31
 8000c5e:	3b01      	subs	r3, #1
 8000c60:	4303      	orrs	r3, r0
 8000c62:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8000c66:	0616      	lsls	r6, r2, #24
 8000c68:	d50c      	bpl.n	8000c84 <HAL_RCCEx_PeriphCLKConfig+0x31c>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8000c6a:	68e3      	ldr	r3, [r4, #12]
 8000c6c:	68a2      	ldr	r2, [r4, #8]
 8000c6e:	061b      	lsls	r3, r3, #24
 8000c70:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000c74:	6862      	ldr	r2, [r4, #4]
 8000c76:	4313      	orrs	r3, r2
 8000c78:	6922      	ldr	r2, [r4, #16]
 8000c7a:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8000c7e:	4a12      	ldr	r2, [pc, #72]	; (8000cc8 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8000c80:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8000c84:	2301      	movs	r3, #1
 8000c86:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8000c88:	f000 fba4 	bl	80013d4 <HAL_GetTick>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8000c8c:	4d0e      	ldr	r5, [pc, #56]	; (8000cc8 <HAL_RCCEx_PeriphCLKConfig+0x360>)
    tickstart = HAL_GetTick();
 8000c8e:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8000c90:	682b      	ldr	r3, [r5, #0]
 8000c92:	0118      	lsls	r0, r3, #4
 8000c94:	f53f af26 	bmi.w	8000ae4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8000c98:	f000 fb9c 	bl	80013d4 <HAL_GetTick>
 8000c9c:	1b80      	subs	r0, r0, r6
 8000c9e:	2802      	cmp	r0, #2
 8000ca0:	d9f6      	bls.n	8000c90 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8000ca2:	e75c      	b.n	8000b5e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8000ca4:	f000 fb96 	bl	80013d4 <HAL_GetTick>
 8000ca8:	1bc0      	subs	r0, r0, r7
 8000caa:	2802      	cmp	r0, #2
 8000cac:	d991      	bls.n	8000bd2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8000cae:	e756      	b.n	8000b5e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8000cb0:	4a05      	ldr	r2, [pc, #20]	; (8000cc8 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8000cb2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000cb4:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8000cb8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000cbc:	430b      	orrs	r3, r1
 8000cbe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000cc2:	e713      	b.n	8000aec <HAL_RCCEx_PeriphCLKConfig+0x184>
 8000cc4:	42470068 	.word	0x42470068
 8000cc8:	40023800 	.word	0x40023800
 8000ccc:	424710d8 	.word	0x424710d8

08000cd0 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cd0:	6803      	ldr	r3, [r0, #0]
{
 8000cd2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cd6:	07dd      	lsls	r5, r3, #31
{
 8000cd8:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cda:	d410      	bmi.n	8000cfe <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cdc:	6823      	ldr	r3, [r4, #0]
 8000cde:	0798      	lsls	r0, r3, #30
 8000ce0:	d45b      	bmi.n	8000d9a <HAL_RCC_OscConfig+0xca>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ce2:	6823      	ldr	r3, [r4, #0]
 8000ce4:	071a      	lsls	r2, r3, #28
 8000ce6:	f100 809d 	bmi.w	8000e24 <HAL_RCC_OscConfig+0x154>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000cea:	6823      	ldr	r3, [r4, #0]
 8000cec:	075b      	lsls	r3, r3, #29
 8000cee:	f100 80bb 	bmi.w	8000e68 <HAL_RCC_OscConfig+0x198>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000cf2:	69a2      	ldr	r2, [r4, #24]
 8000cf4:	2a00      	cmp	r2, #0
 8000cf6:	f040 811c 	bne.w	8000f32 <HAL_RCC_OscConfig+0x262>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	e015      	b.n	8000d2a <HAL_RCC_OscConfig+0x5a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000cfe:	4ba7      	ldr	r3, [pc, #668]	; (8000f9c <HAL_RCC_OscConfig+0x2cc>)
 8000d00:	689a      	ldr	r2, [r3, #8]
 8000d02:	f002 020c 	and.w	r2, r2, #12
 8000d06:	2a04      	cmp	r2, #4
 8000d08:	d007      	beq.n	8000d1a <HAL_RCC_OscConfig+0x4a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000d0a:	689a      	ldr	r2, [r3, #8]
 8000d0c:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000d10:	2a08      	cmp	r2, #8
 8000d12:	d10d      	bne.n	8000d30 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	0259      	lsls	r1, r3, #9
 8000d18:	d50a      	bpl.n	8000d30 <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d1a:	4ba0      	ldr	r3, [pc, #640]	; (8000f9c <HAL_RCC_OscConfig+0x2cc>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	039a      	lsls	r2, r3, #14
 8000d20:	d5dc      	bpl.n	8000cdc <HAL_RCC_OscConfig+0xc>
 8000d22:	6863      	ldr	r3, [r4, #4]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d1d9      	bne.n	8000cdc <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000d28:	2001      	movs	r0, #1
}
 8000d2a:	b002      	add	sp, #8
 8000d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d30:	6863      	ldr	r3, [r4, #4]
 8000d32:	4d9a      	ldr	r5, [pc, #616]	; (8000f9c <HAL_RCC_OscConfig+0x2cc>)
 8000d34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d38:	d111      	bne.n	8000d5e <HAL_RCC_OscConfig+0x8e>
 8000d3a:	682b      	ldr	r3, [r5, #0]
 8000d3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d40:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000d42:	f000 fb47 	bl	80013d4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d46:	4d95      	ldr	r5, [pc, #596]	; (8000f9c <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8000d48:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d4a:	682b      	ldr	r3, [r5, #0]
 8000d4c:	039b      	lsls	r3, r3, #14
 8000d4e:	d4c5      	bmi.n	8000cdc <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d50:	f000 fb40 	bl	80013d4 <HAL_GetTick>
 8000d54:	1b80      	subs	r0, r0, r6
 8000d56:	2864      	cmp	r0, #100	; 0x64
 8000d58:	d9f7      	bls.n	8000d4a <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 8000d5a:	2003      	movs	r0, #3
 8000d5c:	e7e5      	b.n	8000d2a <HAL_RCC_OscConfig+0x5a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d5e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d62:	d104      	bne.n	8000d6e <HAL_RCC_OscConfig+0x9e>
 8000d64:	682b      	ldr	r3, [r5, #0]
 8000d66:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d6a:	602b      	str	r3, [r5, #0]
 8000d6c:	e7e5      	b.n	8000d3a <HAL_RCC_OscConfig+0x6a>
 8000d6e:	682a      	ldr	r2, [r5, #0]
 8000d70:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000d74:	602a      	str	r2, [r5, #0]
 8000d76:	682a      	ldr	r2, [r5, #0]
 8000d78:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000d7c:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d1df      	bne.n	8000d42 <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 8000d82:	f000 fb27 	bl	80013d4 <HAL_GetTick>
 8000d86:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d88:	682b      	ldr	r3, [r5, #0]
 8000d8a:	039f      	lsls	r7, r3, #14
 8000d8c:	d5a6      	bpl.n	8000cdc <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d8e:	f000 fb21 	bl	80013d4 <HAL_GetTick>
 8000d92:	1b80      	subs	r0, r0, r6
 8000d94:	2864      	cmp	r0, #100	; 0x64
 8000d96:	d9f7      	bls.n	8000d88 <HAL_RCC_OscConfig+0xb8>
 8000d98:	e7df      	b.n	8000d5a <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8000d9a:	4b80      	ldr	r3, [pc, #512]	; (8000f9c <HAL_RCC_OscConfig+0x2cc>)
 8000d9c:	689a      	ldr	r2, [r3, #8]
 8000d9e:	f012 0f0c 	tst.w	r2, #12
 8000da2:	d007      	beq.n	8000db4 <HAL_RCC_OscConfig+0xe4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000da4:	689a      	ldr	r2, [r3, #8]
 8000da6:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8000daa:	2a08      	cmp	r2, #8
 8000dac:	d111      	bne.n	8000dd2 <HAL_RCC_OscConfig+0x102>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	025e      	lsls	r6, r3, #9
 8000db2:	d40e      	bmi.n	8000dd2 <HAL_RCC_OscConfig+0x102>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000db4:	4b79      	ldr	r3, [pc, #484]	; (8000f9c <HAL_RCC_OscConfig+0x2cc>)
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	0795      	lsls	r5, r2, #30
 8000dba:	d502      	bpl.n	8000dc2 <HAL_RCC_OscConfig+0xf2>
 8000dbc:	68e2      	ldr	r2, [r4, #12]
 8000dbe:	2a01      	cmp	r2, #1
 8000dc0:	d1b2      	bne.n	8000d28 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	6921      	ldr	r1, [r4, #16]
 8000dc6:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000dca:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000dce:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dd0:	e787      	b.n	8000ce2 <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000dd2:	68e2      	ldr	r2, [r4, #12]
 8000dd4:	4b72      	ldr	r3, [pc, #456]	; (8000fa0 <HAL_RCC_OscConfig+0x2d0>)
 8000dd6:	b1b2      	cbz	r2, 8000e06 <HAL_RCC_OscConfig+0x136>
        __HAL_RCC_HSI_ENABLE();
 8000dd8:	2201      	movs	r2, #1
 8000dda:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000ddc:	f000 fafa 	bl	80013d4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000de0:	4d6e      	ldr	r5, [pc, #440]	; (8000f9c <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8000de2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000de4:	682b      	ldr	r3, [r5, #0]
 8000de6:	0798      	lsls	r0, r3, #30
 8000de8:	d507      	bpl.n	8000dfa <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dea:	682b      	ldr	r3, [r5, #0]
 8000dec:	6922      	ldr	r2, [r4, #16]
 8000dee:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000df2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000df6:	602b      	str	r3, [r5, #0]
 8000df8:	e773      	b.n	8000ce2 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000dfa:	f000 faeb 	bl	80013d4 <HAL_GetTick>
 8000dfe:	1b80      	subs	r0, r0, r6
 8000e00:	2802      	cmp	r0, #2
 8000e02:	d9ef      	bls.n	8000de4 <HAL_RCC_OscConfig+0x114>
 8000e04:	e7a9      	b.n	8000d5a <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 8000e06:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e08:	f000 fae4 	bl	80013d4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e0c:	4d63      	ldr	r5, [pc, #396]	; (8000f9c <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8000e0e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e10:	682b      	ldr	r3, [r5, #0]
 8000e12:	0799      	lsls	r1, r3, #30
 8000e14:	f57f af65 	bpl.w	8000ce2 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e18:	f000 fadc 	bl	80013d4 <HAL_GetTick>
 8000e1c:	1b80      	subs	r0, r0, r6
 8000e1e:	2802      	cmp	r0, #2
 8000e20:	d9f6      	bls.n	8000e10 <HAL_RCC_OscConfig+0x140>
 8000e22:	e79a      	b.n	8000d5a <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000e24:	6962      	ldr	r2, [r4, #20]
 8000e26:	4b5f      	ldr	r3, [pc, #380]	; (8000fa4 <HAL_RCC_OscConfig+0x2d4>)
 8000e28:	b17a      	cbz	r2, 8000e4a <HAL_RCC_OscConfig+0x17a>
      __HAL_RCC_LSI_ENABLE();
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000e2e:	f000 fad1 	bl	80013d4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e32:	4d5a      	ldr	r5, [pc, #360]	; (8000f9c <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 8000e34:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e36:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000e38:	079f      	lsls	r7, r3, #30
 8000e3a:	f53f af56 	bmi.w	8000cea <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e3e:	f000 fac9 	bl	80013d4 <HAL_GetTick>
 8000e42:	1b80      	subs	r0, r0, r6
 8000e44:	2802      	cmp	r0, #2
 8000e46:	d9f6      	bls.n	8000e36 <HAL_RCC_OscConfig+0x166>
 8000e48:	e787      	b.n	8000d5a <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 8000e4a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000e4c:	f000 fac2 	bl	80013d4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e50:	4d52      	ldr	r5, [pc, #328]	; (8000f9c <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 8000e52:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e54:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000e56:	0798      	lsls	r0, r3, #30
 8000e58:	f57f af47 	bpl.w	8000cea <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e5c:	f000 faba 	bl	80013d4 <HAL_GetTick>
 8000e60:	1b80      	subs	r0, r0, r6
 8000e62:	2802      	cmp	r0, #2
 8000e64:	d9f6      	bls.n	8000e54 <HAL_RCC_OscConfig+0x184>
 8000e66:	e778      	b.n	8000d5a <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e68:	4b4c      	ldr	r3, [pc, #304]	; (8000f9c <HAL_RCC_OscConfig+0x2cc>)
 8000e6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e6c:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000e70:	d128      	bne.n	8000ec4 <HAL_RCC_OscConfig+0x1f4>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e72:	9201      	str	r2, [sp, #4]
 8000e74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e76:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e7a:	641a      	str	r2, [r3, #64]	; 0x40
 8000e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e82:	9301      	str	r3, [sp, #4]
 8000e84:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000e86:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e88:	4d47      	ldr	r5, [pc, #284]	; (8000fa8 <HAL_RCC_OscConfig+0x2d8>)
 8000e8a:	682b      	ldr	r3, [r5, #0]
 8000e8c:	05d9      	lsls	r1, r3, #23
 8000e8e:	d51b      	bpl.n	8000ec8 <HAL_RCC_OscConfig+0x1f8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e90:	68a3      	ldr	r3, [r4, #8]
 8000e92:	4d42      	ldr	r5, [pc, #264]	; (8000f9c <HAL_RCC_OscConfig+0x2cc>)
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d127      	bne.n	8000ee8 <HAL_RCC_OscConfig+0x218>
 8000e98:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000e9a:	f043 0301 	orr.w	r3, r3, #1
 8000e9e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000ea0:	f000 fa98 	bl	80013d4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ea4:	4d3d      	ldr	r5, [pc, #244]	; (8000f9c <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 8000ea6:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ea8:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000eac:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000eae:	079b      	lsls	r3, r3, #30
 8000eb0:	d539      	bpl.n	8000f26 <HAL_RCC_OscConfig+0x256>
    if(pwrclkchanged == SET)
 8000eb2:	2e00      	cmp	r6, #0
 8000eb4:	f43f af1d 	beq.w	8000cf2 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000eb8:	4a38      	ldr	r2, [pc, #224]	; (8000f9c <HAL_RCC_OscConfig+0x2cc>)
 8000eba:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000ebc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ec0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ec2:	e716      	b.n	8000cf2 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8000ec4:	2600      	movs	r6, #0
 8000ec6:	e7df      	b.n	8000e88 <HAL_RCC_OscConfig+0x1b8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ec8:	682b      	ldr	r3, [r5, #0]
 8000eca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ece:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000ed0:	f000 fa80 	bl	80013d4 <HAL_GetTick>
 8000ed4:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ed6:	682b      	ldr	r3, [r5, #0]
 8000ed8:	05da      	lsls	r2, r3, #23
 8000eda:	d4d9      	bmi.n	8000e90 <HAL_RCC_OscConfig+0x1c0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000edc:	f000 fa7a 	bl	80013d4 <HAL_GetTick>
 8000ee0:	1bc0      	subs	r0, r0, r7
 8000ee2:	2802      	cmp	r0, #2
 8000ee4:	d9f7      	bls.n	8000ed6 <HAL_RCC_OscConfig+0x206>
 8000ee6:	e738      	b.n	8000d5a <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ee8:	2b05      	cmp	r3, #5
 8000eea:	d104      	bne.n	8000ef6 <HAL_RCC_OscConfig+0x226>
 8000eec:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000eee:	f043 0304 	orr.w	r3, r3, #4
 8000ef2:	672b      	str	r3, [r5, #112]	; 0x70
 8000ef4:	e7d0      	b.n	8000e98 <HAL_RCC_OscConfig+0x1c8>
 8000ef6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000ef8:	f022 0201 	bic.w	r2, r2, #1
 8000efc:	672a      	str	r2, [r5, #112]	; 0x70
 8000efe:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000f00:	f022 0204 	bic.w	r2, r2, #4
 8000f04:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d1ca      	bne.n	8000ea0 <HAL_RCC_OscConfig+0x1d0>
      tickstart = HAL_GetTick();
 8000f0a:	f000 fa63 	bl	80013d4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f0e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000f12:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f14:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000f16:	0798      	lsls	r0, r3, #30
 8000f18:	d5cb      	bpl.n	8000eb2 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f1a:	f000 fa5b 	bl	80013d4 <HAL_GetTick>
 8000f1e:	1bc0      	subs	r0, r0, r7
 8000f20:	4540      	cmp	r0, r8
 8000f22:	d9f7      	bls.n	8000f14 <HAL_RCC_OscConfig+0x244>
 8000f24:	e719      	b.n	8000d5a <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f26:	f000 fa55 	bl	80013d4 <HAL_GetTick>
 8000f2a:	1bc0      	subs	r0, r0, r7
 8000f2c:	4540      	cmp	r0, r8
 8000f2e:	d9bd      	bls.n	8000eac <HAL_RCC_OscConfig+0x1dc>
 8000f30:	e713      	b.n	8000d5a <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000f32:	4d1a      	ldr	r5, [pc, #104]	; (8000f9c <HAL_RCC_OscConfig+0x2cc>)
 8000f34:	68ab      	ldr	r3, [r5, #8]
 8000f36:	f003 030c 	and.w	r3, r3, #12
 8000f3a:	2b08      	cmp	r3, #8
 8000f3c:	f43f aef4 	beq.w	8000d28 <HAL_RCC_OscConfig+0x58>
 8000f40:	4e1a      	ldr	r6, [pc, #104]	; (8000fac <HAL_RCC_OscConfig+0x2dc>)
 8000f42:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f44:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000f46:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f48:	d138      	bne.n	8000fbc <HAL_RCC_OscConfig+0x2ec>
        tickstart = HAL_GetTick();
 8000f4a:	f000 fa43 	bl	80013d4 <HAL_GetTick>
 8000f4e:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f50:	682b      	ldr	r3, [r5, #0]
 8000f52:	0199      	lsls	r1, r3, #6
 8000f54:	d42c      	bmi.n	8000fb0 <HAL_RCC_OscConfig+0x2e0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f56:	6a22      	ldr	r2, [r4, #32]
 8000f58:	69e3      	ldr	r3, [r4, #28]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000f5e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000f62:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000f64:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000f68:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000f6a:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8000f6e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f70:	4c0a      	ldr	r4, [pc, #40]	; (8000f9c <HAL_RCC_OscConfig+0x2cc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f72:	0852      	lsrs	r2, r2, #1
 8000f74:	3a01      	subs	r2, #1
 8000f76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000f7a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000f80:	f000 fa28 	bl	80013d4 <HAL_GetTick>
 8000f84:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f86:	6823      	ldr	r3, [r4, #0]
 8000f88:	019a      	lsls	r2, r3, #6
 8000f8a:	f53f aeb6 	bmi.w	8000cfa <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f8e:	f000 fa21 	bl	80013d4 <HAL_GetTick>
 8000f92:	1b40      	subs	r0, r0, r5
 8000f94:	2802      	cmp	r0, #2
 8000f96:	d9f6      	bls.n	8000f86 <HAL_RCC_OscConfig+0x2b6>
 8000f98:	e6df      	b.n	8000d5a <HAL_RCC_OscConfig+0x8a>
 8000f9a:	bf00      	nop
 8000f9c:	40023800 	.word	0x40023800
 8000fa0:	42470000 	.word	0x42470000
 8000fa4:	42470e80 	.word	0x42470e80
 8000fa8:	40007000 	.word	0x40007000
 8000fac:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fb0:	f000 fa10 	bl	80013d4 <HAL_GetTick>
 8000fb4:	1bc0      	subs	r0, r0, r7
 8000fb6:	2802      	cmp	r0, #2
 8000fb8:	d9ca      	bls.n	8000f50 <HAL_RCC_OscConfig+0x280>
 8000fba:	e6ce      	b.n	8000d5a <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 8000fbc:	f000 fa0a 	bl	80013d4 <HAL_GetTick>
 8000fc0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fc2:	682b      	ldr	r3, [r5, #0]
 8000fc4:	019b      	lsls	r3, r3, #6
 8000fc6:	f57f ae98 	bpl.w	8000cfa <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fca:	f000 fa03 	bl	80013d4 <HAL_GetTick>
 8000fce:	1b00      	subs	r0, r0, r4
 8000fd0:	2802      	cmp	r0, #2
 8000fd2:	d9f6      	bls.n	8000fc2 <HAL_RCC_OscConfig+0x2f2>
 8000fd4:	e6c1      	b.n	8000d5a <HAL_RCC_OscConfig+0x8a>
 8000fd6:	bf00      	nop

08000fd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000fdc:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fde:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe0:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8001184 <HAL_GPIO_Init+0x1ac>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fe4:	4a65      	ldr	r2, [pc, #404]	; (800117c <HAL_GPIO_Init+0x1a4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fe6:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 8001188 <HAL_GPIO_Init+0x1b0>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fea:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fec:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000fee:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ff2:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000ff4:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ff8:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000ffc:	45b6      	cmp	lr, r6
 8000ffe:	f040 80aa 	bne.w	8001156 <HAL_GPIO_Init+0x17e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001002:	684c      	ldr	r4, [r1, #4]
 8001004:	f024 0710 	bic.w	r7, r4, #16
 8001008:	2f02      	cmp	r7, #2
 800100a:	d116      	bne.n	800103a <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 800100c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001010:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001014:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001018:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800101c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001020:	f04f 0c0f 	mov.w	ip, #15
 8001024:	fa0c fc0b 	lsl.w	ip, ip, fp
 8001028:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800102c:	690d      	ldr	r5, [r1, #16]
 800102e:	fa05 f50b 	lsl.w	r5, r5, fp
 8001032:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8001036:	f8ca 5020 	str.w	r5, [sl, #32]
 800103a:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800103e:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8001040:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001044:	fa05 f50a 	lsl.w	r5, r5, sl
 8001048:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800104a:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800104e:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001052:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001056:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001058:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800105c:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 800105e:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001062:	d811      	bhi.n	8001088 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8001064:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001066:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 800106a:	68cf      	ldr	r7, [r1, #12]
 800106c:	fa07 fc0a 	lsl.w	ip, r7, sl
 8001070:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8001074:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001076:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001078:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800107c:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8001080:	409f      	lsls	r7, r3
 8001082:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001086:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8001088:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800108a:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800108c:	688f      	ldr	r7, [r1, #8]
 800108e:	fa07 f70a 	lsl.w	r7, r7, sl
 8001092:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8001094:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001096:	00e5      	lsls	r5, r4, #3
 8001098:	d55d      	bpl.n	8001156 <HAL_GPIO_Init+0x17e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800109a:	f04f 0b00 	mov.w	fp, #0
 800109e:	f8cd b00c 	str.w	fp, [sp, #12]
 80010a2:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010a6:	4d36      	ldr	r5, [pc, #216]	; (8001180 <HAL_GPIO_Init+0x1a8>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a8:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80010ac:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80010b0:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80010b4:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80010b8:	9703      	str	r7, [sp, #12]
 80010ba:	9f03      	ldr	r7, [sp, #12]
 80010bc:	f023 0703 	bic.w	r7, r3, #3
 80010c0:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80010c4:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010c8:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80010cc:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010d0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80010d4:	f04f 0e0f 	mov.w	lr, #15
 80010d8:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010dc:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010de:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010e2:	d03f      	beq.n	8001164 <HAL_GPIO_Init+0x18c>
 80010e4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80010e8:	42a8      	cmp	r0, r5
 80010ea:	d03d      	beq.n	8001168 <HAL_GPIO_Init+0x190>
 80010ec:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80010f0:	42a8      	cmp	r0, r5
 80010f2:	d03b      	beq.n	800116c <HAL_GPIO_Init+0x194>
 80010f4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80010f8:	42a8      	cmp	r0, r5
 80010fa:	d039      	beq.n	8001170 <HAL_GPIO_Init+0x198>
 80010fc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001100:	42a8      	cmp	r0, r5
 8001102:	d037      	beq.n	8001174 <HAL_GPIO_Init+0x19c>
 8001104:	4548      	cmp	r0, r9
 8001106:	d037      	beq.n	8001178 <HAL_GPIO_Init+0x1a0>
 8001108:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800110c:	42a8      	cmp	r0, r5
 800110e:	bf14      	ite	ne
 8001110:	2507      	movne	r5, #7
 8001112:	2506      	moveq	r5, #6
 8001114:	fa05 f50c 	lsl.w	r5, r5, ip
 8001118:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 800111c:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 800111e:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001120:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001122:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001126:	bf0c      	ite	eq
 8001128:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800112a:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 800112c:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 800112e:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001130:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001134:	bf0c      	ite	eq
 8001136:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001138:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 800113a:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800113c:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800113e:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001142:	bf0c      	ite	eq
 8001144:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001146:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8001148:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 800114a:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800114c:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800114e:	bf54      	ite	pl
 8001150:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8001152:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8001154:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001156:	3301      	adds	r3, #1
 8001158:	2b10      	cmp	r3, #16
 800115a:	f47f af48 	bne.w	8000fee <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 800115e:	b005      	add	sp, #20
 8001160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001164:	465d      	mov	r5, fp
 8001166:	e7d5      	b.n	8001114 <HAL_GPIO_Init+0x13c>
 8001168:	2501      	movs	r5, #1
 800116a:	e7d3      	b.n	8001114 <HAL_GPIO_Init+0x13c>
 800116c:	2502      	movs	r5, #2
 800116e:	e7d1      	b.n	8001114 <HAL_GPIO_Init+0x13c>
 8001170:	2503      	movs	r5, #3
 8001172:	e7cf      	b.n	8001114 <HAL_GPIO_Init+0x13c>
 8001174:	2504      	movs	r5, #4
 8001176:	e7cd      	b.n	8001114 <HAL_GPIO_Init+0x13c>
 8001178:	2505      	movs	r5, #5
 800117a:	e7cb      	b.n	8001114 <HAL_GPIO_Init+0x13c>
 800117c:	40013c00 	.word	0x40013c00
 8001180:	40020000 	.word	0x40020000
 8001184:	40023800 	.word	0x40023800
 8001188:	40021400 	.word	0x40021400

0800118c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800118c:	b10a      	cbz	r2, 8001192 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800118e:	6181      	str	r1, [r0, #24]
 8001190:	4770      	bx	lr
 8001192:	0409      	lsls	r1, r1, #16
 8001194:	e7fb      	b.n	800118e <HAL_GPIO_WritePin+0x2>

08001196 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001196:	6943      	ldr	r3, [r0, #20]
 8001198:	4059      	eors	r1, r3
 800119a:	6141      	str	r1, [r0, #20]
 800119c:	4770      	bx	lr
	...

080011a0 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80011a0:	4913      	ldr	r1, [pc, #76]	; (80011f0 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80011a2:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80011a4:	688b      	ldr	r3, [r1, #8]
 80011a6:	f003 030c 	and.w	r3, r3, #12
 80011aa:	2b04      	cmp	r3, #4
 80011ac:	d003      	beq.n	80011b6 <HAL_RCC_GetSysClockFreq+0x16>
 80011ae:	2b08      	cmp	r3, #8
 80011b0:	d003      	beq.n	80011ba <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80011b2:	4810      	ldr	r0, [pc, #64]	; (80011f4 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80011b4:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80011b6:	4810      	ldr	r0, [pc, #64]	; (80011f8 <HAL_RCC_GetSysClockFreq+0x58>)
 80011b8:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80011ba:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80011bc:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011be:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80011c0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011c4:	bf14      	ite	ne
 80011c6:	480c      	ldrne	r0, [pc, #48]	; (80011f8 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011c8:	480a      	ldreq	r0, [pc, #40]	; (80011f4 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011ca:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80011ce:	bf18      	it	ne
 80011d0:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80011d2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011d6:	fba1 0100 	umull	r0, r1, r1, r0
 80011da:	f7ff f84f 	bl	800027c <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80011de:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <HAL_RCC_GetSysClockFreq+0x50>)
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80011e6:	3301      	adds	r3, #1
 80011e8:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80011ea:	fbb0 f0f3 	udiv	r0, r0, r3
 80011ee:	bd08      	pop	{r3, pc}
 80011f0:	40023800 	.word	0x40023800
 80011f4:	00f42400 	.word	0x00f42400
 80011f8:	017d7840 	.word	0x017d7840

080011fc <HAL_RCC_ClockConfig>:
{
 80011fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001200:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001202:	4604      	mov	r4, r0
 8001204:	b910      	cbnz	r0, 800120c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001206:	2001      	movs	r0, #1
 8001208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800120c:	4b44      	ldr	r3, [pc, #272]	; (8001320 <HAL_RCC_ClockConfig+0x124>)
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	f002 020f 	and.w	r2, r2, #15
 8001214:	428a      	cmp	r2, r1
 8001216:	d328      	bcc.n	800126a <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001218:	6821      	ldr	r1, [r4, #0]
 800121a:	078f      	lsls	r7, r1, #30
 800121c:	d42d      	bmi.n	800127a <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800121e:	07c8      	lsls	r0, r1, #31
 8001220:	d440      	bmi.n	80012a4 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001222:	4b3f      	ldr	r3, [pc, #252]	; (8001320 <HAL_RCC_ClockConfig+0x124>)
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	f002 020f 	and.w	r2, r2, #15
 800122a:	4295      	cmp	r5, r2
 800122c:	d366      	bcc.n	80012fc <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800122e:	6822      	ldr	r2, [r4, #0]
 8001230:	0751      	lsls	r1, r2, #29
 8001232:	d46c      	bmi.n	800130e <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001234:	0713      	lsls	r3, r2, #28
 8001236:	d507      	bpl.n	8001248 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001238:	4a3a      	ldr	r2, [pc, #232]	; (8001324 <HAL_RCC_ClockConfig+0x128>)
 800123a:	6921      	ldr	r1, [r4, #16]
 800123c:	6893      	ldr	r3, [r2, #8]
 800123e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001242:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001246:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001248:	f7ff ffaa 	bl	80011a0 <HAL_RCC_GetSysClockFreq>
 800124c:	4b35      	ldr	r3, [pc, #212]	; (8001324 <HAL_RCC_ClockConfig+0x128>)
 800124e:	4a36      	ldr	r2, [pc, #216]	; (8001328 <HAL_RCC_ClockConfig+0x12c>)
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001256:	5cd3      	ldrb	r3, [r2, r3]
 8001258:	40d8      	lsrs	r0, r3
 800125a:	4b34      	ldr	r3, [pc, #208]	; (800132c <HAL_RCC_ClockConfig+0x130>)
 800125c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800125e:	200f      	movs	r0, #15
 8001260:	f000 f86e 	bl	8001340 <HAL_InitTick>
  return HAL_OK;
 8001264:	2000      	movs	r0, #0
 8001266:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800126a:	b2ca      	uxtb	r2, r1
 800126c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f003 030f 	and.w	r3, r3, #15
 8001274:	4299      	cmp	r1, r3
 8001276:	d1c6      	bne.n	8001206 <HAL_RCC_ClockConfig+0xa>
 8001278:	e7ce      	b.n	8001218 <HAL_RCC_ClockConfig+0x1c>
 800127a:	4b2a      	ldr	r3, [pc, #168]	; (8001324 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800127c:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001280:	bf1e      	ittt	ne
 8001282:	689a      	ldrne	r2, [r3, #8]
 8001284:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001288:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800128a:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800128c:	bf42      	ittt	mi
 800128e:	689a      	ldrmi	r2, [r3, #8]
 8001290:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001294:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001296:	689a      	ldr	r2, [r3, #8]
 8001298:	68a0      	ldr	r0, [r4, #8]
 800129a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800129e:	4302      	orrs	r2, r0
 80012a0:	609a      	str	r2, [r3, #8]
 80012a2:	e7bc      	b.n	800121e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012a4:	6862      	ldr	r2, [r4, #4]
 80012a6:	4b1f      	ldr	r3, [pc, #124]	; (8001324 <HAL_RCC_ClockConfig+0x128>)
 80012a8:	2a01      	cmp	r2, #1
 80012aa:	d11d      	bne.n	80012e8 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012b2:	d0a8      	beq.n	8001206 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012b4:	4e1b      	ldr	r6, [pc, #108]	; (8001324 <HAL_RCC_ClockConfig+0x128>)
 80012b6:	68b3      	ldr	r3, [r6, #8]
 80012b8:	f023 0303 	bic.w	r3, r3, #3
 80012bc:	4313      	orrs	r3, r2
 80012be:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80012c0:	f000 f888 	bl	80013d4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012c4:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80012c8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012ca:	68b3      	ldr	r3, [r6, #8]
 80012cc:	6862      	ldr	r2, [r4, #4]
 80012ce:	f003 030c 	and.w	r3, r3, #12
 80012d2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80012d6:	d0a4      	beq.n	8001222 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012d8:	f000 f87c 	bl	80013d4 <HAL_GetTick>
 80012dc:	1bc0      	subs	r0, r0, r7
 80012de:	4540      	cmp	r0, r8
 80012e0:	d9f3      	bls.n	80012ca <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 80012e2:	2003      	movs	r0, #3
}
 80012e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012e8:	1e91      	subs	r1, r2, #2
 80012ea:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012ec:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012ee:	d802      	bhi.n	80012f6 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012f0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80012f4:	e7dd      	b.n	80012b2 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012f6:	f013 0f02 	tst.w	r3, #2
 80012fa:	e7da      	b.n	80012b2 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012fc:	b2ea      	uxtb	r2, r5
 80012fe:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 030f 	and.w	r3, r3, #15
 8001306:	429d      	cmp	r5, r3
 8001308:	f47f af7d 	bne.w	8001206 <HAL_RCC_ClockConfig+0xa>
 800130c:	e78f      	b.n	800122e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800130e:	4905      	ldr	r1, [pc, #20]	; (8001324 <HAL_RCC_ClockConfig+0x128>)
 8001310:	68e0      	ldr	r0, [r4, #12]
 8001312:	688b      	ldr	r3, [r1, #8]
 8001314:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001318:	4303      	orrs	r3, r0
 800131a:	608b      	str	r3, [r1, #8]
 800131c:	e78a      	b.n	8001234 <HAL_RCC_ClockConfig+0x38>
 800131e:	bf00      	nop
 8001320:	40023c00 	.word	0x40023c00
 8001324:	40023800 	.word	0x40023800
 8001328:	08001438 	.word	0x08001438
 800132c:	20000430 	.word	0x20000430

08001330 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001330:	4b01      	ldr	r3, [pc, #4]	; (8001338 <HAL_RCC_GetHCLKFreq+0x8>)
 8001332:	6818      	ldr	r0, [r3, #0]
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	20000430 	.word	0x20000430

0800133c <HAL_MspInit>:
 800133c:	4770      	bx	lr
	...

08001340 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001340:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001342:	4a0e      	ldr	r2, [pc, #56]	; (800137c <HAL_InitTick+0x3c>)
 8001344:	4b0e      	ldr	r3, [pc, #56]	; (8001380 <HAL_InitTick+0x40>)
{
 8001346:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001348:	7818      	ldrb	r0, [r3, #0]
 800134a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800134e:	fbb3 f3f0 	udiv	r3, r3, r0
 8001352:	6810      	ldr	r0, [r2, #0]
 8001354:	fbb0 f0f3 	udiv	r0, r0, r3
 8001358:	f7ff fade 	bl	8000918 <HAL_SYSTICK_Config>
 800135c:	4604      	mov	r4, r0
 800135e:	b958      	cbnz	r0, 8001378 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001360:	2d0f      	cmp	r5, #15
 8001362:	d809      	bhi.n	8001378 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001364:	4602      	mov	r2, r0
 8001366:	4629      	mov	r1, r5
 8001368:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800136c:	f7ff faa0 	bl	80008b0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001370:	4b04      	ldr	r3, [pc, #16]	; (8001384 <HAL_InitTick+0x44>)
 8001372:	4620      	mov	r0, r4
 8001374:	601d      	str	r5, [r3, #0]
 8001376:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001378:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800137a:	bd38      	pop	{r3, r4, r5, pc}
 800137c:	20000430 	.word	0x20000430
 8001380:	20000434 	.word	0x20000434
 8001384:	20000438 	.word	0x20000438

08001388 <HAL_Init>:
{
 8001388:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800138a:	4b0b      	ldr	r3, [pc, #44]	; (80013b8 <HAL_Init+0x30>)
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001392:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800139a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80013a2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013a4:	2003      	movs	r0, #3
 80013a6:	f7ff fa71 	bl	800088c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80013aa:	200f      	movs	r0, #15
 80013ac:	f7ff ffc8 	bl	8001340 <HAL_InitTick>
  HAL_MspInit();
 80013b0:	f7ff ffc4 	bl	800133c <HAL_MspInit>
}
 80013b4:	2000      	movs	r0, #0
 80013b6:	bd08      	pop	{r3, pc}
 80013b8:	40023c00 	.word	0x40023c00

080013bc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80013bc:	4a03      	ldr	r2, [pc, #12]	; (80013cc <HAL_IncTick+0x10>)
 80013be:	4b04      	ldr	r3, [pc, #16]	; (80013d0 <HAL_IncTick+0x14>)
 80013c0:	6811      	ldr	r1, [r2, #0]
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	440b      	add	r3, r1
 80013c6:	6013      	str	r3, [r2, #0]
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	20000458 	.word	0x20000458
 80013d0:	20000434 	.word	0x20000434

080013d4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80013d4:	4b01      	ldr	r3, [pc, #4]	; (80013dc <HAL_GetTick+0x8>)
 80013d6:	6818      	ldr	r0, [r3, #0]
}
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	20000458 	.word	0x20000458

080013e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013e0:	b538      	push	{r3, r4, r5, lr}
 80013e2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80013e4:	f7ff fff6 	bl	80013d4 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013e8:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80013ea:	bf1c      	itt	ne
 80013ec:	4b05      	ldrne	r3, [pc, #20]	; (8001404 <HAL_Delay+0x24>)
 80013ee:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 80013f0:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 80013f2:	bf18      	it	ne
 80013f4:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013f6:	f7ff ffed 	bl	80013d4 <HAL_GetTick>
 80013fa:	1b40      	subs	r0, r0, r5
 80013fc:	4284      	cmp	r4, r0
 80013fe:	d8fa      	bhi.n	80013f6 <HAL_Delay+0x16>
  {
  }
}
 8001400:	bd38      	pop	{r3, r4, r5, pc}
 8001402:	bf00      	nop
 8001404:	20000434 	.word	0x20000434

08001408 <register_fini>:
 8001408:	4b02      	ldr	r3, [pc, #8]	; (8001414 <register_fini+0xc>)
 800140a:	b113      	cbz	r3, 8001412 <register_fini+0xa>
 800140c:	4802      	ldr	r0, [pc, #8]	; (8001418 <register_fini+0x10>)
 800140e:	f7ff b8bd 	b.w	800058c <atexit>
 8001412:	4770      	bx	lr
 8001414:	00000000 	.word	0x00000000
 8001418:	08000599 	.word	0x08000599

0800141c <_init>:
 800141c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800141e:	bf00      	nop
 8001420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001422:	bc08      	pop	{r3}
 8001424:	469e      	mov	lr, r3
 8001426:	4770      	bx	lr

08001428 <_fini>:
 8001428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800142a:	bf00      	nop
 800142c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800142e:	bc08      	pop	{r3}
 8001430:	469e      	mov	lr, r3
 8001432:	4770      	bx	lr
